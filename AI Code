public static int checkWinnerConverted (KnotsAndCrosses kandc, String [][] board, boolean isX, String ally, String opponent){
      if (isX == true){
         ally = "X";
         opponent = "O";
      }else if (isX == false) {
         ally = "O";
         opponent = "X";
      }
      int winScore = 0;
      if (kandc.checkWinner(ally, board)==true){
         winScore = 10;
      }else if (kandc.checkWinner(opponent, board)==true){
         winScore = -10;
      }
      return winScore;
   } 
   // the minimax function brought to life, returns values for different wins 
   public static int AI (KnotsAndCrosses kandc,String [][] board, boolean maximizer, int moves, boolean isX, String ally, String opponent){
      if (isX == true){
         ally = "X";
         opponent = "O";
      }else if (isX == false) {
         ally = "O";
         opponent = "X";
      }
   
      int winnerValue = checkWinnerConverted(kandc, board, isX, ally, opponent);
      if (winnerValue == 10){
         System.out.print(moves);   
         return winnerValue;
      }else if (winnerValue == -10){
         return winnerValue;
      }else if (positionsLeft(kandc, board) == false){
         return 0; 
      }
      int score = 0;
      if (maximizer == true) {
         score = -1000;
         for (int i = 0; i <=2; i++){
            for (int j = 0; j <=2; j++){
               if (board [i][j] == "why" ){
                  board[i][j] = ally; 
                  score = Math.max(score, AI(kandc, board, false, moves+1, isX, ally, opponent));
                  board[i][j] = "why";
                  //moves++;
               }
            }
         }
         return score;
      }else {
         score = 1000;
         for (int i = 0; i <=2; i++) {
            for (int j = 0; j <=2; j++){
               if (board [i][j]== "why"){
                  board [i][j] = opponent;
                  score = Math.min(score, AI(kandc, board, true, moves+1, isX, ally, opponent)); 
                  board [i][j] = "why";                 
               }
            }
         }      
         return score;
      }
   }
   public static int [] bestMove (KnotsAndCrosses kandc, String [][] board, int moves, boolean isX, String ally, String opponent){
      if (isX == true){
         ally = "X";
         opponent = "O";
      }else if (isX == false) {
         ally = "O";
         opponent = "X";
      }
      int [] bestMoveCoords= new int [2]; 
      bestMoveCoords [0] = -1;
      bestMoveCoords [1] = -1;
      int highScore = -1000;
      for (int i = 0; i <=2; i++) {
         for (int j = 0; j <=2; j++){
            if (board [i][j]== "why"){
               board [i][j] = ally;
               int moveValueIndex = AI(kandc, board, false, 0, isX, ally, opponent);
               board[i][j] = "why";
               if (moveValueIndex > highScore){
                  bestMoveCoords [0] = i;
                  bestMoveCoords [1] = j;
                  highScore = moveValueIndex;
               }  
               //System.out.println(highScore);
            }
         }
      }
      return bestMoveCoords;
   }
   
}

